using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace FuelSDK.Test
{
    class ETEmailTest
    {
        ETClient client;
        ETEmail email;
        string emailCustKey;
        string emailName;
        string emailContent;
        string emailUpdatedContent;

        [OneTimeSetUp]
        public void OneTimeSetUp()
        {
            client = new ETClient();

        }

        [SetUp]
        public void Setup()
        {
            emailCustKey = emailName = System.Guid.NewGuid().ToString();
            emailContent = "<b>This is a content generated by Fuel SDK C#";
            emailUpdatedContent = "<b>This is an updated content generated by Fuel SDK C#";

            var emailObj = new ETEmail
            {
                AuthStub = client,
                Name = emailName,
                CustomerKey = emailCustKey,
                Subject = "This email is created using C# SDK",
                HTMLBody = emailContent
            };
            var response = emailObj.Post();
            Assert.AreEqual(response.Code, 200);
            Assert.AreEqual(response.Status, true);
            email = (ETEmail)response.Results[0].Object;
        }

        [TearDown]
        public void TearDown()
        {
            if (email != null)
            {
                var emailObj = new ETEmail
                {
                    AuthStub = client,
                    CustomerKey = emailCustKey
                };
                emailObj.Delete();
            }
        }

        [Test()]
        public void EmailCreate()
        {
            Assert.AreNotEqual(email, null);
        }

        [Test()]
        public void EmailUpdate()
        {
            var emailObj = new ETEmail
            {
                AuthStub = client,
                Name = emailName,
                CustomerKey = emailCustKey,
                HTMLBody = emailUpdatedContent
            };
            var response = emailObj.Patch();
            Assert.AreEqual(response.Code, 200);
            Assert.AreEqual(response.Status, true);
            Assert.AreEqual(response.Results[0].StatusMessage, "Updated Email.");
            emailObj = new ETEmail
            {
                AuthStub = client,
                CustomerKey = emailCustKey,
                Props = new[] { "ID", "PartnerKey", "CreatedDate", "ModifiedDate", "Client.ID", "Name", "Folder", "CategoryID", "HTMLBody", "TextBody", "Subject", "IsActive", "IsHTMLPaste", "ClonedFromID", "Status", "EmailType", "CharacterSet", "HasDynamicSubjectLine", "ContentCheckStatus", "Client.PartnerClientKey", "ContentAreas", "CustomerKey" },
                    SearchFilter = new SimpleFilterPart { Property = "CustomerKey", SimpleOperator = SimpleOperators.equals, Value = new[] { emailName } }
                
            };
            var getresponse = emailObj.Get();
            Assert.AreEqual(((ETEmail)getresponse.Results[0]).HTMLBody, emailUpdatedContent);
        }

        [Test()]
        public void EmailDelete()
        {
            var emailObj = new ETEmail
            {
                AuthStub = client,
                CustomerKey = emailCustKey

            };
            var delresponse = emailObj.Delete();
            Assert.AreEqual(delresponse.Code, 200);
            Assert.AreEqual(delresponse.Results[0].StatusMessage, "Email deleted");
            email = null;
        }

        [Test()]
        public void EmailGet()
        {
            var emailObj = new ETEmail
            {
                AuthStub = client,
                CustomerKey = emailCustKey,
                Props = new[] { "ID", "PartnerKey", "CreatedDate", "ModifiedDate", "Client.ID", "Name", "Folder", "CategoryID", "HTMLBody", "TextBody", "Subject", "IsActive", "IsHTMLPaste", "ClonedFromID", "Status", "EmailType", "CharacterSet", "HasDynamicSubjectLine", "ContentCheckStatus", "Client.PartnerClientKey", "ContentAreas", "CustomerKey" },
                SearchFilter = new SimpleFilterPart { Property = "CustomerKey", SimpleOperator = SimpleOperators.equals, Value = new[] { emailName } }

            };
            var getresponse = emailObj.Get();
            Assert.AreEqual(((ETEmail)getresponse.Results[0]).HTMLBody, emailContent);
            Assert.AreEqual(((ETEmail)getresponse.Results[0]).Name, emailName);
        }
    }
}
